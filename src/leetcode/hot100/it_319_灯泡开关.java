package leetcode.hot100;

import BaseUtil.ListUtil;

/**
 * 初始时有 n 个灯泡处于关闭状态。第一轮，你将会打开所有灯泡。接下来的第二轮，你将会每两个灯泡关闭一个。
 *
 * 第三轮，你每三个灯泡就切换一个灯泡的开关（即，打开变关闭，关闭变打开）。第 i 轮，你每 i 个灯泡就切换一个灯泡的开关。直到第 n 轮，你只需要切换最后一个灯泡的开关。
 *
 * 找出并返回 n 轮后有多少个亮着的灯泡。
 *
 */
public class it_319_灯泡开关 {
    public static void main(String[] args) {
        int res = new it_319_灯泡开关().bulbSwitch(25);
        System.out.println(res);
    }

    private int bulbSwitch(int n) {
        return (int) Math.sqrt(n);
    }

    public int bulbSwitch2(int n) {
        int[] dp=new int[n];
        for (int i = 0; i < n; i++) {
            int temp=i+1;
            int j=i;
            while (j<n){
                dp[j]=dp[j]==0?1:0;
                j+=temp;
            }
            ListUtil.arrayOneNums(dp);
            System.out.println();
            //最后亮的都是完全平方数
            /**
             * [ 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1  ]
             * [ 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1 0 1  ]
             * [ 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1 0 0 0 1 1 1  ]
             * [ 1 0 0 1 1 1 1 1 0 0 1 0 1 0 0 1 1 1 1 1 0 0 1 0 1  ]
             * [ 1 0 0 1 0 1 1 1 0 1 1 0 1 0 1 1 1 1 1 0 0 0 1 0 0  ]
             * [ 1 0 0 1 0 0 1 1 0 1 1 1 1 0 1 1 1 0 1 0 0 0 1 1 0  ]
             * [ 1 0 0 1 0 0 0 1 0 1 1 1 1 1 1 1 1 0 1 0 1 0 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 0 1 1 1 1 1 1 0 1 0 1 0 1 0 1 0 0  ]
             * [ 1 0 0 1 0 0 0 0 1 1 1 1 1 1 1 0 1 1 1 0 1 0 1 0 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 1 1 1 1 1 0 1 1 1 1 1 0 1 0 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 1 1 1 1 0 1 1 1 1 1 1 1 0 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 1 1 1 0 1 1 1 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 1 1 0 1 1 1 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 1 0 1 1 1 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 1 1 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 1 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 1 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 1 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 1 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 1 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 1 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0  ]
             * [ 1 0 0 1 0 0 0 0 1 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 1  ]
             */
        }
        int count=0;
        for (int d : dp) {
            if (d==1)count++;
        }
        return count;
    }
}
